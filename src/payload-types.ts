/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    blogs: Blog;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  /**
   * Controls access to content and admin features
   */
  role: 'viewer' | 'editor' | 'admin';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Upload images, documents, and other media files
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility
   */
  alt: string;
  /**
   * Optional caption for the media
   */
  caption?: string | null;
  /**
   * Photo credit or attribution
   */
  credit?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    hero?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Create pages with flexible content blocks
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * Page title displayed in the browser tab and page header
   */
  title: string;
  /**
   * URL path for this page. Example: about, blog/my-post
   */
  slug?: string | null;
  /**
   * Content displayed within the Hero when Show Hero is enabled
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Optional background image for the Hero section when Show Hero is enabled
   */
  heroBackground?: (number | null) | Media;
  /**
   * If enabled, the hero is rendered using the Hero Content rich text.
   */
  showHero?: boolean | null;
  /**
   * Add flexible content blocks to build your page layout
   */
  blocks?:
    | (
        | {
            title: string;
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            layout?: ('full' | 'split') | null;
            image?: (number | null) | Media;
            imagePosition?: ('left' | 'right') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contentBlock';
          }
        | {
            columns?: number | null;
            cards: {
              image?: (number | null) | Media;
              title: string;
              text?: string | null;
              href?: string | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'cardSection';
          }
        | {
            image: number | Media;
            imagePosition?: ('left' | 'right') | null;
            title: string;
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            ctaButton?: {
              label?: string | null;
              href?: string | null;
            };
            backgroundColor?: ('default' | 'light' | 'dark') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'mediaBlock';
          }
        | {
            title: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            ctaButton: {
              label: string;
              href: string;
            };
            align?: ('left' | 'center' | 'right') | null;
            variant?: ('default' | 'accent' | 'gradient') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'ctaBlock';
          }
        | {
            title: string;
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            image?: (number | null) | Media;
            ctaButton?: {
              label?: string | null;
              href?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'aboutUsSection';
          }
        | {
            layout?: ('grid' | 'carousel') | null;
            partners: {
              logo: number | Media;
              name: string;
              href?: string | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'partnersBlock';
          }
        | {
            title: string;
            partners: {
              name: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'partnersTextBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            description: string;
            /**
             * Enable search functionality for the table items
             */
            enableSearch?: boolean | null;
            searchPlaceholder?: string | null;
            items: {
              title: string;
              content: string;
              /**
               * Additional details that will be shown when expanded
               */
              details?: string | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'expandableTable';
          }
        | {
            title: string;
            testimonials: {
              quote: string;
              author: string;
              role?: string | null;
              id?: string | null;
            }[];
            autoplayInterval?: number | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'testimonials';
          }
        | {
            posts?:
              | {
                  image?: (number | null) | Media;
                  title: string;
                  excerpt?: string | null;
                  linkType?: ('internal' | 'external') | null;
                  href?: string | null;
                  post?: {
                    relationTo: 'blogs';
                    value: number | Blog;
                  } | null;
                  date?: string | null;
                  author?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'blogPostCards';
          }
        | {
            title?: string | null;
            subtitle?: string | null;
            items?:
              | {
                  image: number | Media;
                  title: string;
                  description?: string | null;
                  linkType?: ('internal' | 'external') | null;
                  internal?: {
                    relation?:
                      | ({
                          relationTo: 'pages';
                          value: number | Page;
                        } | null)
                      | ({
                          relationTo: 'blogs';
                          value: number | Blog;
                        } | null);
                  };
                  external?: {
                    href?: string | null;
                  };
                  id?: string | null;
                }[]
              | null;
            slidesToShow?: number | null;
            autoplay?: boolean | null;
            autoplayInterval?: number | null;
            showArrows?: boolean | null;
            showDots?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'carousel';
          }
        | {
            title: string;
            subtitle?: string | null;
            items: {
              image: number | Media;
              title: string;
              description: string;
              links?:
                | {
                    text: string;
                    variant?: ('primary' | 'secondary') | null;
                    linkType?: ('internal' | 'external') | null;
                    internal?: {
                      relation:
                        | {
                            relationTo: 'pages';
                            value: number | Page;
                          }
                        | {
                            relationTo: 'blogs';
                            value: number | Blog;
                          };
                    };
                    external?: {
                      href: string;
                    };
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'twoCardBlock';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  /**
   * Hide the page header
   */
  hideHeader?: boolean | null;
  /**
   * Hide the page footer
   */
  hideFooter?: boolean | null;
  /**
   * Use full width layout instead of container
   */
  fullWidth?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title: string;
  slug: string;
  excerpt?: string | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  publishedAt?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc:
    | {
        relationTo: 'pages';
        value: number | Page;
      }
    | {
        relationTo: 'blogs';
        value: number | Blog;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  credit?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        hero?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  heroBackground?: T;
  showHero?: T;
  blocks?:
    | T
    | {
        contentBlock?:
          | T
          | {
              title?: T;
              content?: T;
              layout?: T;
              image?: T;
              imagePosition?: T;
              id?: T;
              blockName?: T;
            };
        cardSection?:
          | T
          | {
              columns?: T;
              cards?:
                | T
                | {
                    image?: T;
                    title?: T;
                    text?: T;
                    href?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        mediaBlock?:
          | T
          | {
              image?: T;
              imagePosition?: T;
              title?: T;
              content?: T;
              ctaButton?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        ctaBlock?:
          | T
          | {
              title?: T;
              description?: T;
              ctaButton?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              align?: T;
              variant?: T;
              id?: T;
              blockName?: T;
            };
        aboutUsSection?:
          | T
          | {
              title?: T;
              content?: T;
              image?: T;
              ctaButton?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              id?: T;
              blockName?: T;
            };
        partnersBlock?:
          | T
          | {
              layout?: T;
              partners?:
                | T
                | {
                    logo?: T;
                    name?: T;
                    href?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        partnersTextBlock?:
          | T
          | {
              title?: T;
              partners?:
                | T
                | {
                    name?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        expandableTable?:
          | T
          | {
              title?: T;
              subtitle?: T;
              description?: T;
              enableSearch?: T;
              searchPlaceholder?: T;
              items?:
                | T
                | {
                    title?: T;
                    content?: T;
                    details?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              title?: T;
              testimonials?:
                | T
                | {
                    quote?: T;
                    author?: T;
                    role?: T;
                    id?: T;
                  };
              autoplayInterval?: T;
              id?: T;
              blockName?: T;
            };
        blogPostCards?:
          | T
          | {
              posts?:
                | T
                | {
                    image?: T;
                    title?: T;
                    excerpt?: T;
                    linkType?: T;
                    href?: T;
                    post?: T;
                    date?: T;
                    author?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        carousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              items?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    linkType?: T;
                    internal?:
                      | T
                      | {
                          relation?: T;
                        };
                    external?:
                      | T
                      | {
                          href?: T;
                        };
                    id?: T;
                  };
              slidesToShow?: T;
              autoplay?: T;
              autoplayInterval?: T;
              showArrows?: T;
              showDots?: T;
              id?: T;
              blockName?: T;
            };
        twoCardBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              items?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    links?:
                      | T
                      | {
                          text?: T;
                          variant?: T;
                          linkType?: T;
                          internal?:
                            | T
                            | {
                                relation?: T;
                              };
                          external?:
                            | T
                            | {
                                href?: T;
                              };
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  hideHeader?: T;
  hideFooter?: T;
  fullWidth?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  publishedAt?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  logo?: (number | null) | Media;
  ctaButton?: {
    label?: string | null;
    href?: string | null;
  };
  enableBanter?: boolean | null;
  /**
   * Optional description text shown above the site header
   */
  headerDescription?: string | null;
  navigation?:
    | {
        label: string;
        hasMegaMenu?: boolean | null;
        linkType?: ('internal' | 'external') | null;
        page?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'blogs';
              value: number | Blog;
            } | null);
        href?: string | null;
        megaMenu?: {
          categories?:
            | {
                title: string;
                items?:
                  | {
                      label: string;
                      linkType?: ('internal' | 'external') | null;
                      page?:
                        | ({
                            relationTo: 'pages';
                            value: number | Page;
                          } | null)
                        | ({
                            relationTo: 'blogs';
                            value: number | Blog;
                          } | null);
                      href?: string | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          featured?:
            | {
                label: string;
                linkType?: ('internal' | 'external') | null;
                page?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'blogs';
                      value: number | Blog;
                    } | null);
                href?: string | null;
                id?: string | null;
              }[]
            | null;
        };
        external?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  about?: string | null;
  navigationLinks?:
    | {
        label: string;
        linkType?: ('internal' | 'external') | null;
        page?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'blogs';
              value: number | Blog;
            } | null);
        href?: string | null;
        id?: string | null;
      }[]
    | null;
  legalLinks?:
    | {
        label: string;
        linkType?: ('internal' | 'external') | null;
        page?:
          | ({
              relationTo: 'pages';
              value: number | Page;
            } | null)
          | ({
              relationTo: 'blogs';
              value: number | Blog;
            } | null);
        href?: string | null;
        id?: string | null;
      }[]
    | null;
  contact?: {
    email?: string | null;
    phone?: string | null;
    address?: string | null;
  };
  socialLinks?:
    | {
        platform?: ('facebook' | 'twitter' | 'linkedin' | 'x') | null;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  ctaButton?:
    | T
    | {
        label?: T;
        href?: T;
      };
  enableBanter?: T;
  headerDescription?: T;
  navigation?:
    | T
    | {
        label?: T;
        hasMegaMenu?: T;
        linkType?: T;
        page?: T;
        href?: T;
        megaMenu?:
          | T
          | {
              categories?:
                | T
                | {
                    title?: T;
                    items?:
                      | T
                      | {
                          label?: T;
                          linkType?: T;
                          page?: T;
                          href?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              featured?:
                | T
                | {
                    label?: T;
                    linkType?: T;
                    page?: T;
                    href?: T;
                    id?: T;
                  };
            };
        external?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  about?: T;
  navigationLinks?:
    | T
    | {
        label?: T;
        linkType?: T;
        page?: T;
        href?: T;
        id?: T;
      };
  legalLinks?:
    | T
    | {
        label?: T;
        linkType?: T;
        page?: T;
        href?: T;
        id?: T;
      };
  contact?:
    | T
    | {
        email?: T;
        phone?: T;
        address?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}